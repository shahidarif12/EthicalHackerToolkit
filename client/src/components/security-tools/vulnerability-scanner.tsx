import { useState } from "react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { VulnerabilityResult, ScanResult } from "@/types/security";
import { Loader2, Search } from "lucide-react";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { ScanResult as ScanResultComponent } from "@/components/ui/scan-result";
import { Terminal } from "@/components/ui/terminal-output";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertCircle, AlertTriangle, CheckCircle } from "lucide-react";

const formSchema = z.object({
  url: z.string().url("Please enter a valid URL"),
});

type FormValues = z.infer<typeof formSchema>;

export function VulnerabilityScanner() {
  const { toast } = useToast();
  const [result, setResult] = useState<ScanResult | null>(null);
  const [terminalOutput, setTerminalOutput] = useState({
    lines: [
      { 
        text: "Vulnerability Scanner Ready", 
        type: "info" as const 
      },
      {
        text: "Enter a URL to scan for security vulnerabilities",
        type: "info" as const
      }
    ],
  });

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      url: "",
    },
  });

  const vulnScanMutation = useMutation({
    mutationFn: async (values: FormValues) => {
      updateTerminal({ text: `Starting vulnerability scan on ${values.url}...`, type: "info" });
      updateTerminal({ text: `analyzing security headers and configurations...`, type: "command" });
      
      const res = await apiRequest("POST", "/api/tools/vuln-scan", {
        url: values.url,
      });
      return res.json();
    },
    onSuccess: (data: ScanResult) => {
      setResult(data);
      
      const vulnResult = data.results as VulnerabilityResult;
      
      if (vulnResult.error) {
        updateTerminal({ text: `Error: ${vulnResult.error}`, type: "error" });
        return;
      }
      
      // Show security headers in terminal
      updateTerminal({ text: "# Security Headers Analysis", type: "info" });
      Object.entries(vulnResult.securityHeaders).forEach(([key, value]) => {
        updateTerminal({ 
          text: `${key}: ${value || 'Not set'}`, 
          type: value ? "output" : "warning" 
        });
      });
      
      // Show SSL Info if available
      if (vulnResult.sslInfo) {
        updateTerminal({ 
          text: `# SSL/TLS: ${vulnResult.sslInfo.secure ? 'Secure' : 'Insecure'}`, 
          type: vulnResult.sslInfo.secure ? "success" : "error" 
        });
        updateTerminal({ 
          text: `Protocol: ${vulnResult.sslInfo.protocol}`, 
          type: "output" 
        });
      }
      
      // Show vulnerabilities
      if (vulnResult.vulnerabilities.length > 0) {
        updateTerminal({ 
          text: `# Found ${vulnResult.vulnerabilities.length} potential security issues:`, 
          type: "warning" 
        });
        
        vulnResult.vulnerabilities.forEach((vuln, index) => {
          updateTerminal({ 
            text: `[${vuln.severity.toUpperCase()}] ${vuln.title}`, 
            type: vuln.severity === "high" ? "error" : vuln.severity === "medium" ? "warning" : "info" 
          });
        });
      } else {
        updateTerminal({ text: "No obvious vulnerabilities detected", type: "success" });
      }
      
      updateTerminal({ text: "Vulnerability scan completed", type: "success" });
      
      toast({
        title: "Vulnerability Scan Complete",
        description: `Found ${vulnResult.vulnerabilities.length} potential security issues.`,
      });
    },
    onError: (error: Error) => {
      updateTerminal({ text: `Error: ${error.message}`, type: "error" });
      
      toast({
        title: "Vulnerability Scan Failed",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  function updateTerminal(line: { text: string; type: "info" | "success" | "error" | "warning" | "command" | "output" }) {
    setTerminalOutput(prev => ({
      lines: [...prev.lines, line]
    }));
  }

  function onSubmit(values: FormValues) {
    vulnScanMutation.mutate(values);
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardContent className="pt-6">
          <Form {...form}>
            <form
              onSubmit={form.handleSubmit(onSubmit)}
              className="flex items-end gap-2"
            >
              <FormField
                control={form.control}
                name="url"
                render={({ field }) => (
                  <FormItem className="flex-1">
                    <FormLabel>URL</FormLabel>
                    <FormControl>
                      <Input placeholder="https://example.com" {...field} />
                    </FormControl>
                    <FormDescription>
                      Enter a URL to scan for security vulnerabilities.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <Button
                type="submit"
                disabled={vulnScanMutation.isPending}
                className="mb-[2px]"
              >
                {vulnScanMutation.isPending ? (
                  <Loader2 className="h-4 w-4 animate-spin mr-2" />
                ) : (
                  <Search className="h-4 w-4 mr-2" />
                )}
                Scan
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>

      <Terminal output={terminalOutput} className="h-60" />

      {result && (
        <ScanResultComponent
          title="Vulnerability Scan Results"
          timestamp={new Date().toLocaleString()}
          scanId={result.scanId}
          target={form.getValues().url}
          scanType="vulnerability"
        >
          <div className="space-y-6">
            {(() => {
              const vulnResult = result.results as VulnerabilityResult;
              if (vulnResult.error) {
                return (
                  <div className="p-4 bg-red-50 text-red-800 rounded-md dark:bg-red-900/20 dark:text-red-300">
                    <p className="font-medium">Error occurred:</p>
                    <p>{vulnResult.error}</p>
                  </div>
                );
              }

              const highCount = vulnResult.vulnerabilities.filter(v => v.severity === 'high').length;
              const mediumCount = vulnResult.vulnerabilities.filter(v => v.severity === 'medium').length;
              const lowCount = vulnResult.vulnerabilities.filter(v => v.severity === 'low').length;

              return (
                <>
                  <div className="space-y-3">
                    <h3 className="text-lg font-medium">Vulnerability Summary</h3>
                    <div className="flex flex-wrap gap-3">
                      <Badge variant={highCount > 0 ? "destructive" : "outline"} className="text-sm py-1 px-3">
                        {highCount} High Risk
                      </Badge>
                      <Badge variant={mediumCount > 0 ? "default" : "outline"} className="text-sm py-1 px-3 bg-yellow-600">
                        {mediumCount} Medium Risk
                      </Badge>
                      <Badge variant={lowCount > 0 ? "secondary" : "outline"} className="text-sm py-1 px-3">
                        {lowCount} Low Risk
                      </Badge>
                    </div>
                  </div>

                  {vulnResult.sslInfo && (
                    <div className="space-y-2">
                      <h3 className="text-lg font-medium">SSL/TLS</h3>
                      <Alert variant={vulnResult.sslInfo.secure ? "default" : "destructive"}>
                        {vulnResult.sslInfo.secure ? (
                          <CheckCircle className="h-4 w-4" />
                        ) : (
                          <AlertCircle className="h-4 w-4" />
                        )}
                        <AlertTitle>
                          {vulnResult.sslInfo.secure 
                            ? "HTTPS Enabled" 
                            : "Not Using HTTPS"}
                        </AlertTitle>
                        <AlertDescription>
                          {vulnResult.sslInfo.secure 
                            ? `Using ${vulnResult.sslInfo.protocol}` 
                            : "Site is not using HTTPS which means data transmission is not encrypted."}
                        </AlertDescription>
                      </Alert>
                    </div>
                  )}

                  <div className="space-y-3">
                    <h3 className="text-lg font-medium">Security Headers</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {Object.entries(vulnResult.securityHeaders).map(([header, value], index) => (
                        <Alert 
                          key={index} 
                          variant={value ? "default" : "warning"}
                          className="flex-1"
                        >
                          {value ? (
                            <CheckCircle className="h-4 w-4" />
                          ) : (
                            <AlertTriangle className="h-4 w-4" />
                          )}
                          <AlertTitle className="font-mono text-sm">
                            {header}
                          </AlertTitle>
                          <AlertDescription className="text-xs">
                            {value || "Not set"}
                          </AlertDescription>
                        </Alert>
                      ))}
                    </div>
                  </div>

                  {vulnResult.vulnerabilities.length > 0 && (
                    <div className="space-y-3">
                      <h3 className="text-lg font-medium">Detected Vulnerabilities</h3>
                      <div className="space-y-3">
                        {vulnResult.vulnerabilities.map((vuln, index) => (
                          <Alert 
                            key={index} 
                            variant={
                              vuln.severity === 'high' 
                                ? "destructive" 
                                : vuln.severity === 'medium' 
                                  ? "warning" 
                                  : "default"
                            }
                          >
                            <AlertCircle className="h-4 w-4" />
                            <AlertTitle className="flex items-center gap-2">
                              {vuln.title}
                              <Badge 
                                variant="outline" 
                                className={
                                  vuln.severity === 'high' 
                                    ? "border-red-200 bg-red-100 text-red-800 dark:border-red-800 dark:bg-red-900/20 dark:text-red-300" 
                                    : vuln.severity === 'medium' 
                                      ? "border-yellow-200 bg-yellow-100 text-yellow-800 dark:border-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300" 
                                      : "border-blue-200 bg-blue-100 text-blue-800 dark:border-blue-800 dark:bg-blue-900/20 dark:text-blue-300"
                                }
                              >
                                {vuln.severity.toUpperCase()}
                              </Badge>
                            </AlertTitle>
                            <AlertDescription>
                              {vuln.description}
                            </AlertDescription>
                          </Alert>
                        ))}
                      </div>
                    </div>
                  )}

                  <div className="text-sm text-muted-foreground mt-4">
                    <p>
                      <strong>Note:</strong> This is a basic vulnerability scan. For more comprehensive security testing, consider using specialized security testing tools.
                    </p>
                  </div>
                </>
              );
            })()}
          </div>
        </ScanResultComponent>
      )}
    </div>
  );
}
